The client and the collector that you can find on these subdirectories have been
designed to execute ping measurements from several machines and push results, in
real-time, to the server. Results are stored in the collector and users
can use them while ping measurements are still running on the clients.

This tool has also been designed to perform pings with several flow-IDs. As RTTs
may vary depending on the path used, ping different flow-IDs independatly is
recommended for a good precision. 

This tool is based atop Scamper.


Requirements :

Ubuntu is recommended and you must have Python installed.
You need to install Scamper (see http://www.caida.org/tools/measurement/scamper/).
Be sure to have the utility sc_warts2json.
The client requires to be run with root privileges.
Another option is to either use the setuid bit or set specific capabilities
on the scamper binary file.


How to use this tool :

1) Create a file where are indicated clients IP addresses as well as the IP
addresses they must ping.
For example :

------------my_file.txt---------------
xx.xx.xx.xx	yy.yy.yy.yy
xx.xx.xx.xx	zz.zz.zz.zz
aa.aa.aa.aa	bb.bb.bb.bb
aa.aa.aa.aa	yy.yy.yy.yy
--------------end file----------------

xx.xx.xx.xx will ping yy.yy.yy.yy and zz.zz.zz.zz
aa.aa.aa.aa will ping bb.bb.bb.bb and yy.yy.yy.yy

2) Create a directory where the collector will store the results

mkdir my_data

3) Compile the client

You may want to use the makefile

4) Start the collector :

python collector.py -p 6700 -i my_file.txt -d my_data

The collector will listen on port 6700. Results will be stored in the
directory my_data. The collector will send to each client the list of 
destinations to ping based on the source-destination pairs in my_file.txt.

Start each client :
./client -s ff.ff.ff.ff -p 6700 -f 16 -n 10 -w 1

where ff.ff.ff.ff is the IP address of the server, 16 is the number of flow-ID,
1 is the number of ping per flow-ID and per second, 10 is the
number of ping to execute before pushing results to the server.
